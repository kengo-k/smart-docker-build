name: 'Smart Docker Build'
description: 'Intelligently build and push Docker images with multi-platform support, change detection, and flexible tagging strategies. Supports GHCR and DockerHub with automatic validation and error handling.'
author: 'kengo-k'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  repository_token:
    description: 'GitHub Token with permissions to access repository information (required for repository access and GHCR authentication)'
    required: true
  timezone:
    description: 'Timezone for generating timestamps in image tags (e.g., "UTC", "Asia/Tokyo", "America/New_York")'
    required: false
    default: 'UTC'
  cache_enabled:
    description: 'Enable Docker build cache for faster builds'
    required: false
    default: 'true'
  cache_type:
    description: 'Cache type: "gha" (GitHub Actions Cache) or "disabled"'
    required: false
    default: 'gha'
  use_dryrun:
    description: 'Enable dry run mode - builds images but skips pushing to registry'
    required: false
    default: 'false'
  registry:
    description: 'Container registry to push images to: "ghcr" (default) or "dockerhub"'
    required: false
    default: 'ghcr'
  registry_username:
    description: 'Registry username (required for DockerHub, ignored for GHCR)'
    required: false
  registry_token:
    description: 'Registry authentication token (required for DockerHub, ignored for GHCR)'
    required: false
runs:
  using: 'composite'
  steps:
    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3
      if: inputs.cache_enabled == 'true' && inputs.use_dryrun != 'true'

    - name: 'Get docker build args'
      id: js_action
      run: node ${{ github.action_path }}/internal/get/dist/index.js
      shell: bash
      env:
        INPUT_REPOSITORY_TOKEN: ${{ inputs.repository_token }}
        INPUT_TIMEZONE: ${{ inputs.timezone }}
        INPUT_CACHE_ENABLED: ${{ inputs.cache_enabled }}
        INPUT_CACHE_TYPE: ${{ inputs.cache_type }}
        INPUT_REGISTRY: ${{ inputs.registry }}
        INPUT_REGISTRY_USERNAME: ${{ inputs.registry_username }}
        INPUT_REGISTRY_TOKEN: ${{ inputs.registry_token }}

    - name: Login to GHCR
      if: steps.js_action.outputs.has_builds == 'true' && inputs.use_dryrun != 'true' && inputs.registry == 'ghcr'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.repository_token }}

    - name: Login to DockerHub
      if: steps.js_action.outputs.has_builds == 'true' && inputs.use_dryrun != 'true' && inputs.registry == 'dockerhub'
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_token }}

    - name: Checkout latest commit
      if: steps.js_action.outputs.has_builds == 'true' && inputs.use_dryrun != 'true'
      uses: actions/checkout@v4

    - name: 'Build and Push Docker Images'
      if: steps.js_action.outputs.has_builds == 'true' && inputs.use_dryrun != 'true'
      shell: bash
      run: |
        build_args='${{ steps.js_action.outputs.build_args }}'
        success_count=0
        failure_count=0
        length=$(echo "$build_args" | jq '. | length')

        for ((i=0; i<length; i++)); do
          element=$(echo "$build_args" | jq -c ".[$i]")
          path=$(echo "$element" | jq -r '.dockerfilePath')
          name=$(echo "$element" | jq -r '.imageName')
          tag=$(echo "$element" | jq -r '.imageTag')

          if [ "${{ inputs.cache_enabled }}" = "true" ] && [ "${{ inputs.cache_type }}" = "gha" ]; then
            cache_from="--cache-from type=gha"
            cache_to="--cache-to type=gha,mode=max"
            build_cmd="docker buildx build"
          else
            cache_from=""
            cache_to=""
            build_cmd="docker build"
          fi

          # Determine registry URL
          if [ "${{ inputs.registry }}" = "ghcr" ]; then
            registry_url="ghcr.io/${{ github.actor }}/$name:$tag"
          elif [ "${{ inputs.registry }}" = "dockerhub" ]; then
            registry_url="${{ inputs.registry_username }}/$name:$tag"
          fi

          # Build and push image
          if eval "$build_cmd $cache_from $cache_to -t $registry_url -f $path $(dirname $path)"; then
            if docker push $registry_url; then
              success_count=$((success_count + 1))
            else
              failure_count=$((failure_count + 1))
            fi
          else
            failure_count=$((failure_count + 1))
          fi
        done

        if [ $failure_count -gt 0 ] && [ $success_count -eq 0 ]; then
          exit 1
        fi

    - name: 'Dry Run Summary'
      if: inputs.use_dryrun == 'true' && steps.js_action.outputs.has_builds == 'true'
      shell: bash
      run: |
        build_args='${{ steps.js_action.outputs.build_args }}'
        length=$(echo "$build_args" | jq '. | length')

        echo "Dry run mode enabled - would build $length image(s) to registry: ${{ inputs.registry }}"
        for ((i=0; i<length; i++)); do
          element=$(echo "$build_args" | jq -c ".[$i]")
          name=$(echo "$element" | jq -r '.imageName')
          tag=$(echo "$element" | jq -r '.imageTag')

          if [ "${{ inputs.registry }}" = "ghcr" ]; then
            echo "  - ghcr.io/${{ github.actor }}/$name:$tag"
          elif [ "${{ inputs.registry }}" = "dockerhub" ]; then
            echo "  - ${{ inputs.registry_username }}/$name:$tag"
          fi
        done
