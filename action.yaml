name: 'Smart Docker Build'
description: 'Intelligently build and push Docker images with multi-platform support, change detection, and flexible tagging strategies. Supports GHCR and DockerHub with automatic validation and error handling.'
author: 'kengo-k'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  token:
    description: 'GitHub Token with permissions to access repository information and push images to container registry (GHCR_TOKEN or DOCKERHUB_TOKEN)'
    required: true
  timezone:
    description: 'Timezone for generating timestamps in image tags (e.g., "UTC", "Asia/Tokyo", "America/New_York")'
    required: false
    default: 'UTC'
  cache_enabled:
    description: 'Enable Docker build cache for faster builds'
    required: false
    default: 'true'
  cache_type:
    description: 'Cache type: "gha" (GitHub Actions Cache) or "disabled"'
    required: false
    default: 'gha'
runs:
  using: 'composite'
  steps:
    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3
      if: inputs.cache_enabled == 'true'

    - name: 'Get docker build args'
      id: js_action
      run: node ${{ github.action_path }}/internal/get/dist/index.js
      shell: bash
      env:
        INPUT_TOKEN: ${{ inputs.token }}      # ← ここで inputs.token を INPUT_TOKEN に変換
        INPUT_TIMEZONE: ${{ inputs.timezone }} # ← ここで inputs.timezone を INPUT_TIMEZONE に変換
        INPUT_CACHE_ENABLED: ${{ inputs.cache_enabled }}
        INPUT_CACHE_TYPE: ${{ inputs.cache_type }}

    - name: Login to ghcr
      if: steps.js_action.outputs.has_builds == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Checkout latest commit
      if: steps.js_action.outputs.has_builds == 'true'
      uses: actions/checkout@v4

    - name: 'Build and Push Docker Images'
      if: steps.js_action.outputs.has_builds == 'true'
      shell: bash
      run: |
        build_args='${{ steps.js_action.outputs.build_args }}'
        success_count=0
        failure_count=0
        length=$(echo "$build_args" | jq '. | length')

        for ((i=0; i<length; i++)); do
          element=$(echo "$build_args" | jq -c ".[$i]")
          path=$(echo "$element" | jq -r '.dockerfilePath')
          name=$(echo "$element" | jq -r '.imageName')
          tag=$(echo "$element" | jq -r '.imageTag')

          if [ "${{ inputs.cache_enabled }}" = "true" ] && [ "${{ inputs.cache_type }}" = "gha" ]; then
            cache_from="--cache-from type=gha"
            cache_to="--cache-to type=gha,mode=max"
            build_cmd="docker buildx build --load"
          else
            cache_from=""
            cache_to=""
            build_cmd="docker build"
          fi

          if eval "$build_cmd $cache_from $cache_to -t ghcr.io/${{ github.actor }}/$name:$tag -f $path $(dirname $path)"; then
            if docker push ghcr.io/${{ github.actor }}/$name:$tag; then
              success_count=$((success_count + 1))
            else
              failure_count=$((failure_count + 1))
            fi
          else
            failure_count=$((failure_count + 1))
          fi
        done

        if [ $failure_count -gt 0 ] && [ $success_count -eq 0 ]; then
          exit 1
        fi
