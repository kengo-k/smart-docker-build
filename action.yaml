name: 'Smart Docker Build'
description: 'Intelligently build and push Docker images with multi-platform support, change detection, and flexible tagging strategies. Supports GHCR and DockerHub with automatic validation and error handling.'
author: 'kengo-k'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  token:
    description: 'GitHub Token with permissions to access repository information and push images to container registry (GHCR_TOKEN or DOCKERHUB_TOKEN)'
    required: true
  timezone:
    description: 'Timezone for generating timestamps in image tags (e.g., "UTC", "Asia/Tokyo", "America/New_York")'
    required: false
    default: 'UTC'
runs:
  using: 'composite'
  steps:
    - name: 'Get docker build args'
      id: js_action
      run: |
        cd ${{ github.action_path }}/internal/get
        npm ci
        npm run build
        node dist/index.js
      shell: bash
      env:
        INPUT_TOKEN: ${{ inputs.token }}      # ← ここで inputs.token を INPUT_TOKEN に変換
        INPUT_TIMEZONE: ${{ inputs.timezone }} # ← ここで inputs.timezone を INPUT_TIMEZONE に変換

    - name: Login to ghcr
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Checkout latest commit
      uses: actions/checkout@v4

    - name: 'Build and Push Docker Images'
      shell: bash
      run: |
        build_args='${{ steps.js_action.outputs.build_args }}'
        echo "🔧 Starting Docker build and push process..."
        echo "📋 Build args JSON: $build_args"

        # Debug: show each element
        echo "📋 Individual elements:"
        echo "$build_args" | jq -c '.[]' | while read -r element; do
          echo "  - $element"
        done

        success_count=0
        failure_count=0
        
        # Get array length
        length=$(echo "$build_args" | jq '. | length')
        echo "📊 Total items to process: $length"
        
        # Process each element by index to avoid subshell issues
        for ((i=0; i<length; i++)); do
          element=$(echo "$build_args" | jq -c ".[$i]")
          echo "🔄 Processing element $((i+1))/$length: $element"
          
          path=$(echo "$element" | jq -r '.path')
          name=$(echo "$element" | jq -r '.name')
          tag=$(echo "$element" | jq -r '.tag')

          echo "📦 Building image: $name:$tag from $path"
          echo "🔍 Extracted values: path=$path, name=$name, tag=$tag"

          # Build the Docker image
          echo "🏗️ Starting Docker build..."
          if docker build -t ghcr.io/${{ github.actor }}/$name:$tag -f $path $(dirname $path); then
            echo "✅ Successfully built ghcr.io/${{ github.actor }}/$name:$tag"

            # Push the Docker image
            echo "📤 Starting Docker push..."
            if docker push ghcr.io/${{ github.actor }}/$name:$tag; then
              echo "✅ Successfully pushed ghcr.io/${{ github.actor }}/$name:$tag"
              success_count=$((success_count + 1))
            else
              echo "❌ Failed to push ghcr.io/${{ github.actor }}/$name:$tag"
              failure_count=$((failure_count + 1))
            fi
          else
            echo "❌ Failed to build ghcr.io/${{ github.actor }}/$name:$tag from $path"
            echo "💡 Please check:"
            echo "   - Dockerfile syntax in $path"
            echo "   - Base image availability"
            echo "   - Build context in $(dirname $path)"
            ((failure_count++))
          fi
          
          echo "🔄 Completed processing for $name:$tag (item $((i+1))/$length)"
          echo "---"
        done

        echo "📊 Build Summary:"
        echo "   ✅ Successful: $success_count"
        echo "   ❌ Failed: $failure_count"

        if [ $failure_count -gt 0 ] && [ $success_count -eq 0 ]; then
          echo "💥 All builds failed. Please check the errors above."
          exit 1
        elif [ $failure_count -gt 0 ]; then
          echo "⚠️  Some builds failed, but continuing with successful ones."
        else
          echo "🎉 All builds completed successfully!"
        fi
